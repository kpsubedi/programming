Python Fundamentals
===================
REPL (Read-Eval-Print-Loop)

>>> REPL

>>> _ 
15
Recently printed value

>>> _ + 5
20

The above useful trick only works in REPL.

>>> print("Welcome to Python 3")
Welcome to Python 3

Python 3, print is a function call.

>>> for i in range(10):
...     x = i + 10
...     print(x)
... 
10
11
12
13
14
15
16
17
18
19
>>>


PEP: 8
======
Style Guide for Python Code

Python Standard Library
=======================
- Extensive standard library.
- The standard library is structured as modules.

- Gain access of these standard library is using import.
E.g. import <module_name>
import ctypes

>>> import math
>>> math.sqrt(49)
7.0
>>> 

>>> help
Type help() for interactive help, or help(object) for help about object.
>>> help(math)

>>> help(math.factorial)
factorial(...)
    factorial(x) -> Integral
    
    Find x!. Raise a ValueError if x is negative or non-integral.
    
    
>>> math.factorial(10)
3628800

This function takes integer as an input and return integer as output.

>>> n = 10
>>> k = 7
>>> math.factorial(n) / (math.factorial(k) * math.factorial(n-k))
120.0

>>> from math import factorial 
>>> factorial(n) / (factorial(k) * factorial(n-k))
120.0

>>> from math import factorial as fac
>>> fac(n) / (fac(k) * fac(n-k))
120.0

>>> fac(n) // (fac(k) * fac(n-k))
120

>>> n = 100
>>> fac(100)
93326215443944152681699238856266700490715968264381621468592963895217599993229915608941463976156518286253697920827223758251185210916864000000000000000000000000

>>> len(str(fac(100)))
158

Scalar types and values
-----------------------
int => arbitrary precision integer
float => 64-bit floating point numbers
NoneType => the null object
{None}
bool => boolean logical values
{True, False}

int
---
unlimited precision signed integer
>>> 10
10
>>> 0b10
2
>>> 0o10
8
>>> 0x10
16
>>> int(3.5)
3
Note: Rounding is always towards zero.
>>> int(-3.6)
-3
>>> int("725")
725
>>> int("10000", 3)
81
81 is in decimal.

float
-----
IEEE-754 double precision (64-bit).
53 bits of binary precision.
15 to 16 bits of decimal precision.

>>> 4.256
4.256
>>> 3e8
300000000.0

>>> 1.616e-35
1.616e-35

>>> float(9)
9.0
float(): Constructor
>>> float("3.456")
3.456
>>> float("nan")
nan
>>> float("inf")
inf
>>> float("-inf")
-inf

Involving both int and float is promoted to a float.
>>> 4.0 + 8
12.0

None
----
The sole value of NoneType.
Often used to represent the absence of a value.
Not displayed by the REPL.

None is frequently used to represent the absence of a value. 
The python REPL never print None result.
>>> None
>>>

>>> x = None
>>> x is None
True

bool
----
Boolean logical value. 
Either True or False.
The bool type represents logical states and plays an important role in several of Python's control flow 
structures.

>>> True
True
>>> False
False

For integers, zero is considered falsey and all other values are truthy.
>>> bool(0)
False
>>> bool(12)
True
>>> bool(-1)
True
>>> 

Same behavior with float. 
>>> bool(0.0)
False
>>> bool(1.2)
True
>>> bool(-1.2)
True

when converting from collections, such as strings or lists, only empty collections are treated as 
falsey.

>>> bool([])
False
>>> bool([1,'a'])
True
>>>

>>> bool("")
False
>>> bool("Spam")
True
>>>

In particular, we cannot use the bool constructor to convert from string representations of
True and False.

>>> bool("False")
True
>>> bool("True")
True
>>>

Note: because string "False" is not empty string.


Python Relational Operators
===========================

== value equality / equivalence 
!= value inequality / inequivalence 
< less-than
> greater-than
<= less-than or equal to
>= greater-than or equal to

Bool values are commonly produced by Python's relational operators, which can be used for comparing objects. 
These include value equality or equivalence, value inequality or inequivalence, less-than, greater-than, 
less-than or equal to and greater-than or equal to.

>>> x = 20
>>> x == 20
True
>>> x == 10
False
>>> x != 20
False
>>> x != 13
True
>>> x < 30
True
>>> x > 30
False
>>> x <=20 
True
>>> x >= 20
True


Conditional Statements
----------------------

if expression:
    print("expression is True")
    
Note: expression is converted to bool as if by the bool() constructor 

>>> if True:
...     print("It's True!")
... 
It's True!

>>> if False:
...     print("It's False!")
... 
>>> 

>>> if bool("eggs"):
...     print("I like egg!")
... 
I like egg!

The above expression is exactly same as below:

>>> if "eggs":
...     print("I like egg!")
... 
I like egg!

Thanks to this useful shorthand, explicit conversion to bool using the bool constructor is rarely seen in 
Python. 


if expression:
    print("expression is True")
else:
    print("expression is False")
 Example:
 --------
 >>> c = 54
>>> if c > 60:
...     print("Greater than 60")
... else:
...     print("60 or smaller")
... 
60 or smaller
>>>

>>> if c > 60:
...     print("Greater than 60")
... else:
...     if c < 20:
...         print("Less than 20")
...     else:
...         print("Between 20 and 60")
... 
Between 20 and 60
>>>

Python provides the elif keyword to eliminate the need for nested if ... else structures in many 
cases.

>>> if c > 60:
...     print("Greater than 60")
... elif c < 20:
...     print("Less than 20")
... else:
...     print("Between 20 and 50")
... 
Between 20 and 50
>>>

Zen of Python
-------------
Flat is better than nested.

while loops
-----------

while expression:
    print("loop while expression is True")
    
Expression is converted to bool as if by the bool() constructor.

>>> x = 10
>>> while x != 0:
...     print(x)
...     x-=1
... 
10
9
8
7
6
5
4
3
2
1
>>>

>>> y = 10
>>> while y:
...     print(y)
...     y -= 1
... 
10
9
8
7
6
5
4
3
2
1
>>>
This works because the conversion of the integer value of y to bool results to True 
until we get to zero, which converts to False.

>>> while True:
...     print("Looping in while True")
... 
Looping in while True
Looping in while True
...
...
...

breaking out
------------
while True:
    if expression:
        break
print("Go here on break")

The break keyword terminates the innermost loop, transferring execution to the first statement after the loop.

>>> while True:
...     user_input = input()
...     if int(user_input) % 5 == 0:
...         break
... 
12
23
25
>>>

Break terminates the innermost loop, in this case the while loop, and causes execution to jump to the 
first statement after the loop or in our case, the end of the program. 

Importing Python Standard Library modules:
=========================================
import module
from module import function
from module import function as alias

Collections
===========
str - immutable strings of Unicode code points
bytes - immutable strings of bytes
list - mutable sequences of objects
dict - mutable mappings from keys to values

str
---
immutable sequences of Unicode codepoints
- meaning that once you have constructed a string you can't modify its contents.

String Literals
---------------
Literal strings in Python are delimited by quotes. You can use single quotes or double quotes.
"This is a String"
'This is also a String'

>>> "test'
  File "<stdin>", line 1
    "test'
         ^
SyntaxError: EOL while scanning string literal
>>>

>>> "It's a very nice course"
"It's a very nice course"
>>>
>>> '"Yes!", you told, "He agrees!"'
'"Yes!", you told, "He agrees!"'
>>>

>>> "Hello" "From"
'HelloFrom'
>>>

Strings with Newlines
---------------------
1. Multiline strings
2. Escape sequences

>>> """This is 
... a sample of 
... multiline string"""
'This is \na sample of \nmultiline string'
>>>

>>> m='This is\na sample of\nmultiline string'
>>> ,
  File "<stdin>", line 1
    ,
    ^
SyntaxError: invalid syntax
>>> m
'This is\na sample of\nmultiline string'
>>> print(m)
This is
a sample of
multiline string
>>>

Windows
-------
'\r\n'
Carriage-return newline

Linux/ UNIX
-----------
'\n'
newline

Python3 has universal newlines '\n'.

PEP 278

>>> "This is a use of \" escape sequence."
'This is a use of " escape sequence.'

>>> 'This is a another use of \' escape sequence.'
"This is a another use of ' escape sequence."

Raw Strings
-----------
>>> path = r'D:\Backups\Files\Programs'
>>> path
'D:\\Backups\\Files\\Programs'
>>> print(path)
D:\Backups\Files\Programs

No Separate Character Type
--------------------------
'a long string'
's' 

Both of these are str

No separate character type "characters" are simply one element strings.

>>> s='This is tes.'
>>> s[4]
' '
>>> s[3]
's'
>>> type(s[2])
<class 'str'>
>>> 

>>> help(str)

>>> c = 'kathmandu'
>>> c.capitalize()
'Kathmandu'
>>>


>>> c = 'kathmandu'
>>> c.capitalize()
'Kathmandu'
>>> c
'kathmandu'
>>> 

Note: capitalize() method does not change the original string c.

Python Strings are Unicode.
UTF-8.

Source encoding: UTF-8 
UTF-8 literals

>>> 'Vi er s\u00e5 glad for \u00e5 h\u00f8re og'
'Vi er så glad for å høre og'
>>>

>>> '\xe5'
'å'

>>> '\345'
'å'

Bytes
-----
immutable sequences of bytes

Bytes are very similar to strings except that rather than being sequences of unicode codepoints, they are 
sequences of well, bytes. As such, they are used for raw binary data and fixed with single byte character 
encoding such as ASCII.

Bytes Literals
--------------
b'data'
b"data"

>>> d=b'some bytes example'
>>> d.split()
[b'some', b'bytes', b'example']
>>>

Converting Between Strings and Bytes
------------------------------------

decode bytes => str
encode str => bytes

list
----
mutable sequences of objects
Lists are the workhorse of Python data structures.

List Literals
-------------
[a, b, c, d]

>>> a = [30, 4, 9]
>>> a
[30, 4, 9]
>>> f = ["apple", "grap", "pear", "orange"]
>>> f
['apple', 'grap', 'pear', 'orange']
>>> f[1]
'grap'
>>> f[1]=90
>>> f
['apple', 90, 'pear', 'orange']
>>>
>>> l= []
>>> l.append('sample')
>>> l
['sample']
>>> l.append(90)
>>> l
['sample', 90]
>>> list("sample")
['s', 'a', 'm', 'p', 'l', 'e']
>>>

dict
----
mutable mappings of keys to values
Dictionaries are completely fundamental to the way the Python language works and are very widely used.
A dictionary maps keys to values and in some languages is known as an associate of array.

Dict Literals
-------------
{k1 : v1, k2: v2}

Each pair is separated by a comma, and each key is separated from the corresponding value by a colon.

>>> d = {'alice': '901-897-3456', 'bob': '678-345-9021', 'eve': '254-098-3456'}
>>> d['alice']
'901-897-3456'
>>> d['alice']='999-99-9999'
>>> d
{'alice': '999-99-9999', 'bob': '678-345-9021', 'eve': '254-098-3456'}
>>>

Adding a value in dictionary
>>> d['charls']='455-009-9999'
>>> d
{'alice': '999-99-9999', 'bob': '678-345-9021', 'eve': '254-098-3456', 'charls': '455-009-9999'}
>>>


for-loop
--------
visit each item in an iterable series.

For-Loop Syntax
for item in iterable:
    ...body...
    
>>> cities = ["California", "Memphis", "New York" ,"Houston" ,"Redmond"]
>>> for city in cities:
...     print(city)
... 
California
Memphis
New York
Houston
Redmond
>>>

>>> colors = {'crimson': 0xdc143c, 'coral': 0xff7f50, 'teal': 0x008080}
>>> for color in colors:
...     print(color, colors[color])
... 
crimson 14423100
coral 16744272
teal 32896
>>>

>>> from urllib.request import urlopen
>>> with urlopen('http://sixty-north.com/c/t.txt') as story:
...     story_words = []
...     for line in story:
...         line_words = line.split()
...         for word in line_words:
...             story_words.append(word)
... 
>>> 

>>> story_words
[b'It', b'was', b'the', b'best', b'of', b'times', b'it', b'was', b'the', b'worst', b'of', b'times', b'it', b'was', b'the', b'age', b'of', b'wisdom', b'it', b'was', b'the', b'age', b'of', b'foolishness', b'it', b'was', b'the', b'epoch', b'of', b'belief', b'it', b'was', b'the', b'epoch', b'of', b'incredulity', b'it', b'was', b'the', b'season', b'of', b'Light', b'it', b'was', b'the', b'season', b'of', b'Darkness', b'it', b'was', b'the', b'spring', b'of', b'hope', b'it', b'was', b'the', b'winter', b'of', b'despair', b'we', b'had', b'everything', b'before', b'us', b'we', b'had', b'nothing', b'before', b'us', b'we', b'were', b'all', b'going', b'direct', b'to', b'Heaven', b'we', b'were', b'all', b'going', b'direct', b'the', b'other', b'way', b'in', b'short', b'the', b'period', b'was', b'so', b'far', b'like', b'the', b'present', b'period', b'that', b'some', b'of', b'its', b'noisiest', b'authorities', b'insisted', b'on', b'its', b'being', b'received', b'for', b'good', b'or', b'for', b'evil', b'in', b'the', b'superlative', b'degree', b'of', b'comparison', b'only']
>>>

Notice that each of the single quoted words is prefixed by a lowercase B meaning that we have a list of bytes objects where
we would have preferred a list of strings. 

This is because the HTTP request transferred raw bytes to us over the network.

To get a list of strings, we should decode the byte of stream in each line into UTF-8 Unicode strings.


>>> with urlopen('http://sixty-north.com/c/t.txt') as story:
...     story_words = []
...     for line in story:
...         line_words = line.decode('utf-8').split()
...         for word in line_words:
...             story_words.append(word)
... 
>>>

>>> story_words
['It', 'was', 'the', 'best', 'of', 'times', 'it', 'was', 'the', 'worst', 'of', 'times', 'it', 'was', 'the', 'age', 'of', 'wisdom', 'it', 'was', 'the', 'age', 'of', 'foolishness', 'it', 'was', 'the', 'epoch', 'of', 'belief', 'it', 'was', 'the', 'epoch', 'of', 'incredulity', 'it', 'was', 'the', 'season', 'of', 'Light', 'it', 'was', 'the', 'season', 'of', 'Darkness', 'it', 'was', 'the', 'spring', 'of', 'hope', 'it', 'was', 'the', 'winter', 'of', 'despair', 'we', 'had', 'everything', 'before', 'us', 'we', 'had', 'nothing', 'before', 'us', 'we', 'were', 'all', 'going', 'direct', 'to', 'Heaven', 'we', 'were', 'all', 'going', 'direct', 'the', 'other', 'way', 'in', 'short', 'the', 'period', 'was', 'so', 'far', 'like', 'the', 'present', 'period', 'that', 'some', 'of', 'its', 'noisiest', 'authorities', 'insisted', 'on', 'its', 'being', 'received', 'for', 'good', 'or', 'for', 'evil', 'in', 'the', 'superlative', 'degree', 'of', 'comparison', 'only']
>>>
==== Loop More Examples ====


from urllib.request import urlopen

with urlopen('http://sixty-north.com/c/t.txt') as story:
    story_words = []
    for line in story:
        line_words = line.decode('utf-8').split()
        for word in line_words:
            story_words.append(word)

    print(story_words)

####

user_input = ''
names = []
while user_input.lower() != 'done':
    user_input = input('Enter a name, or done to exit: ')
    if user_input.lower() != 'done':
        names.append(user_input)

print(names)

################

user_input = ''
names = []

while user_input.lower() != 'done':
    if user_input:
      names.append(user_input)

    user_input = input('Enter a name, or done to exit: ')

print(names)

###############
rainfall = {
    'october': 3.5,
    'november': 4.2,
    'december': 2.1
}

for key in rainfall.keys():
    print(f'{key}: {rainfall[key]}cm')
########

for i in range(0,5,3):
    print(i)
##########

Modularity
==========
about structure and organization
modularity is an important property for anything but trivial software systems as it gives us the power to make self-contained,
reusable pieces, which can be combined in new ways to solve different problems.

As with most programming languages, the most fine-grained modularization facility is the definition of reusable functions.

Collections of related functions are typically grouped into source code files called modules.
-

